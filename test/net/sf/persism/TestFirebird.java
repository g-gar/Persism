package net.sf.persism;

import net.sf.persism.dao.Contact;
import net.sf.persism.dao.Customer;

import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalTime;
import java.util.*;

public class TestFirebird extends BaseTest {

    private static final Log log = Log.getLogger(TestFirebird.class);

    @Override
    public void setUp() throws Exception {
        super.setUp();

        Properties props = new Properties();
        props.load(getClass().getResourceAsStream("/firebird.properties"));
        String driver = props.getProperty("database.driver");
        String url = props.getProperty("database.url");
        String username = props.getProperty("database.username");
        String password = props.getProperty("database.password");
        Class.forName(driver);
        con = DriverManager.getConnection(url, username, password);

        log.info(con.getMetaData().getDatabaseProductName());

        con = new net.sf.log4jdbc.ConnectionSpy(con);

        createTables();

        session = new Session(con);

    }

    @Override
    public void tearDown() throws Exception {
        super.tearDown();
    }

    @Override
    protected void createTables() throws SQLException {
        List<String> commands = new ArrayList<>(12);
        String sql;


        if (UtilsForTests.isTableInDatabase("ORDERS", con)) {
            commands.add("DROP TABLE ORDERS;");
        }


        sql = "CREATE TABLE ORDERS ( " +
                "id integer generated by default as identity primary key, " +
                " NAME VARCHAR(30), " +
                " PAID BOOLEAN, " +
                " CUSTOMER_ID VARCHAR(10), " +
                " CREATED TIMESTAMP DEFAULT 'NOW', " +
                " DATE_PAID TIMESTAMP, " +
                " DATE_SOMETHING TIMESTAMP " +
                "); ";

        commands.add(sql);

        if (UtilsForTests.isTableInDatabase("CUSTOMERS", con)) {
            commands.add("DROP TABLE CUSTOMERS;");
            commands.add("DROP GENERATOR GEN_CUSTOMER_ID;");
        }

        sql = "CREATE GENERATOR GEN_CUSTOMER_ID; ";
        commands.add(sql);
//        executeCommand(sql, con);


        sql = "CREATE TABLE CUSTOMERS ( " +
                "  CUSTOMER_ID VARCHAR(10) NOT NULL, " +
                "  COMPANY_NAME VARCHAR(30) NOT NULL, " +
                "  CONTACT_NAME VARCHAR(30), " +
                "  CONTACT_TITLE VARCHAR(10), " +
                "  ADDRESS VARCHAR(40), " +
                "  CITY VARCHAR(30), " +
                "  REGION VARCHAR(10), " +
                "  POSTAL_CODE VARCHAR(20), " +
                "  COUNTRY VARCHAR(20), " +
                "  PHONE VARCHAR(30), " +
                "  FAX VARCHAR(30), " +
                "  STATUS CHAR(1), " +
                "  DATE_REGISTERED TIMESTAMP, " +
                "  DATE_OF_LAST_ORDER TIMESTAMP, " +
                "  CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID) " +
                "); ";
        commands.add(sql);
        executeCommands(commands, con);

        if (UtilsForTests.isTableInDatabase("Contacts", con)) {
            executeCommand("DROP TABLE Contacts", con);
        }
        // FIREBIRD and Derby don't like NOT NULL
        sql = "CREATE TABLE Contacts( " +
                "   identity binary(16) NOT NULL PRIMARY KEY, \n" +  // test binary(16)
                "   PartnerID varchar(36) NOT NULL, \n" + // test varchar(36)
                "   Type char(2) NOT NULL, \n" +
                "   Firstname varchar(50) NOT NULL, \n" +
                "   Lastname varchar(50) NOT NULL, \n" +
                "   ContactName varchar(50) NOT NULL, \n" +
                "   Company varchar(50) NOT NULL, \n" +
                "   Division varchar(50), \n" +
                "   Email varchar(50), \n" +
                "   Address1 varchar(50), \n" +
                "   Address2 varchar(50), \n" +
                "   City varchar(50), \n" +
                "   StateProvince varchar(50), \n" +
                "   ZipPostalCode varchar(10), \n" +
                "   Country varchar(50), \n" +
                "   DateAdded Date, \n" +
                "   LastModified TIMESTAMP, \n" +
                "   Notes BLOB SUB_TYPE TEXT, \n" +
                "   AmountOwed REAL, \n" +
                "   WhatTimeIsIt TIME ) ";

        executeCommand(sql, con);

    }

    @Override
    public void testContactTable() throws SQLException {
        UUID identity = UUID.randomUUID();
        UUID partnerId = UUID.randomUUID();

        Contact contact = new Contact();
        contact.setIdentity(identity);
        contact.setPartnerId(partnerId);
        contact.setFirstname("Fred");
        contact.setLastname("Flintstone");
        contact.setDivision("DIVISION X");
        contact.setLastModified(new Timestamp(System.currentTimeMillis() - 100000000l));
        contact.setContactName("Fred Flintstone");
        contact.setAddress1("123 Sesame Street");
        contact.setAddress2("Appt #0 (garbage can)");
        contact.setCompany("Grouch Inc");
        contact.setCountry("US");
        contact.setCity("Philly?");
        contact.setType("X");
        contact.setDateAdded(new java.sql.Date(System.currentTimeMillis()));
        contact.setAmountOwed(100.23f);
        contact.setNotes("B:AH B:AH VBLAH\r\n BLAH BLAY!");
        contact.setWhatTimeIsIt(Time.valueOf(LocalTime.now()));
        session.insert(contact);

        Contact contact2 = new Contact();
        contact2.setIdentity(identity);
        assertTrue(session.fetch(contact2));
        assertNotNull(contact2.getPartnerId());
        assertEquals(contact2.getIdentity(), identity);
        assertEquals(contact2.getPartnerId(), partnerId);

        contact.setDivision("Y");
        session.update(contact);

        assertEquals("1?", 1, session.delete(contact));

    }

    public void testSomething() {
        // what else?
        Collection<PropertyInfo> x = MetaData.getPropertyInfo(Customer.class);
        for (PropertyInfo pi : x) {
            log.warn(pi); // exercise toString for no good reason! Well, for code coverage...
        }

    }
}
