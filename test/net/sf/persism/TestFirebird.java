package net.sf.persism;

import net.sf.persism.dao.Customer;

import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;

public class TestFirebird extends BaseTest {

    private static final Log log = Log.getLogger(TestFirebird.class);

    @Override
    public void setUp() throws Exception {
        super.setUp();

        Properties props = new Properties();
        props.load(getClass().getResourceAsStream("/firebird.properties"));
        String driver = props.getProperty("database.driver");
        String url = props.getProperty("database.url");
        String username = props.getProperty("database.username");
        String password = props.getProperty("database.password");
        Class.forName(driver);
        con = DriverManager.getConnection(url, username, password);

        log.info(con.getMetaData().getDatabaseProductName());

        con = new net.sf.log4jdbc.ConnectionSpy(con);

        createTables();

        session = new Session(con);

    }

    @Override
    public void tearDown() throws Exception {
        super.tearDown();
    }

    @Override
    protected void createTables() throws SQLException {
        List<String> commands = new ArrayList<>(12);
        String sql;


        if (UtilsForTests.isTableInDatabase("ORDERS", con)) {
            commands.add("DROP TABLE ORDERS;");
        }


        sql = "CREATE TABLE ORDERS ( " +
                "id integer generated by default as identity primary key, " +
                " NAME VARCHAR(30), " +
                " PAID BOOLEAN, " +
                " CUSTOMER_ID VARCHAR(10), " +
                " CREATED TIMESTAMP DEFAULT 'NOW' " +
                "); ";

        commands.add(sql);

        if (UtilsForTests.isTableInDatabase("CUSTOMERS", con)) {
            commands.add("DROP TABLE CUSTOMERS;");
            commands.add("DROP GENERATOR GEN_CUSTOMER_ID;");
        }

        sql = "CREATE GENERATOR GEN_CUSTOMER_ID; ";
        commands.add(sql);
//        executeCommand(sql, con);


        sql = "CREATE TABLE CUSTOMERS ( " +
                "  CUSTOMER_ID VARCHAR(10) NOT NULL, " +
                "  COMPANY_NAME VARCHAR(30) NOT NULL, " +
                "  CONTACT_NAME VARCHAR(30), " +
                "  CONTACT_TITLE VARCHAR(10), " +
                "  ADDRESS VARCHAR(40), " +
                "  CITY VARCHAR(30), " +
                "  REGION VARCHAR(10), " +
                "  POSTAL_CODE VARCHAR(20), " +
                "  COUNTRY VARCHAR(20), " +
                "  PHONE VARCHAR(30), " +
                "  FAX VARCHAR(30), " +
                "  STATUS CHAR(1), " +
                "  DATE_REGISTERED TIMESTAMP, " +
                "  DATE_OF_LAST_ORDER TIMESTAMP, " +
                "  CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID) " +
                "); ";
        commands.add(sql);
//       executeCommand(sql, con);



      executeCommands(commands, con);
    }

    public void testSomething() {
        // what else?
        Collection<PropertyInfo> x = MetaData.getPropertyInfo(Customer.class);
        for (PropertyInfo pi : x) {
            log.warn(pi); // exercise toString for no good reason! Well, for code coverage...
        }

    }
}
